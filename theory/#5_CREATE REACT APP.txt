
#5.0 Introduction

Create React App
: 리액트 어플리케이션을 만드는 최고의 방식

- 개발 서버에 접근한다든가
- 자동으로 새로고침을 시켜준다든가
- 즉각적으로 어플리케이션 안에 CSS를 포함시켜 준다든가

하는 기능들이 있음

node.js 다운로드 사이트
[nodejs.org](http://nodejs.org/)


window + R > cmd(명령 프롬프트)

  node -v // 버전 확인

  npx
  exit

  cd OneDrive/바탕 화면/React-Learning

  npx create-react-app terrible // 다운로드

  code terrible // vsc로 open


[package.json] 여길 보면
실행시킬 수 있는 <script>들이 있는 걸 확인할 수 있는데,
이것은 create-react-app 팀에 의해 만들어진 것들

vsc terminal

  npm start

그럼 개발용 서버를 만들게 되는데,
브라우저 창이 뜨는데 이게 바로 creat-react-app을 사용해서 어플리케이션을 만들었을 때 초기 버전임


[src 폴더]는 네 모든 파일들을 넣을 폴더
*가장 중요한 건 [index.js]


니콜라스랑 다른 점 1)

React-app이 업데이트되면서 영상 속 내용과 차이점이 생김.
ReactDOM.render 구문이 폐기되고, ReactDOM.createRoot 구문으로 대체됨.

필요 없는 부분 지운 index.js 코드

  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
  );

#5.0 댓글 [qmdlkojn1] (https://nomadcoders.co/users/qmdlkojn1)


니콜라스랑 다른 점 2)

react 콘솔창에서 <script>부분

  <script src="/static/js/bundle.js"></script>
  <script src="/static/js/vendors~main.chunk.js"></script>
  <script src="/static/js/main.chunk.js"></script>

나

  <script defer="" src="/static/js/bundle.js"></script>


필요 없는 부분 지운 App.js 코드

  function App() {
    return (
      <div>
        <h1>Welcome back!!!</h1>
      </div>
    );
  }

  export default App;


+) 우리는 한 파일당 한 컴포넌트를 가지고 있고, index.js에서 그 컴포넌트를 import시킴
   즉, 차후에 버튼과 같은 다른 컴포넌트도 한 개의 파일로 이루어질 거라는 걸 의미

∴ 이제 어플리케이션을 만들고 npm start를 실행 = 브라우저에 리액트 실행


#5.1 Tour of CRA

해볼 것

- 컴포넌트 만들고
- props 넣고
- propTypes 확인해 보는


*react 안 켜질 때 (terminal)

  cd terrible  // or terrible 폴더 우클릭 open terminal
  npm start


  // Button.js
  function Button({ text }) {
    return <button>{text}</button>;
  }

  export default Button;


  // App.js
  import Button from './Button';

  function App() {
    return (
      <div>
        <h1>Welcome back!!!</h1>
        <Button text={'Continue'} />
      </div>
    );
  }

  export default App;


vsc terminal : propTypes install

  npm i prop-types


  import PropTypes from 'prop-types';

  function Button({ text }) {
    return <button>{text}</button>;
  }

  Button.PropTypes = {
    text: PropTypes.string.isRequired,
  };

  export default Button;

∴ 서로 다른 파일들로 코드를 분할하는 등의 작업과
  특정 컴포넌트를 위한 CSS파일을 만들 수 있는 기능을 배움

CSS에 관한 두 가지 선택지

  1. 한 개의 css파일(style.css) 생성
      a. [index.js]로 가서 `import`

global(전역적인) CSS <style>을 원하지 않는다면
(= CSS를 import할 때, css파일이 적용하려는 파일의 모든 부분에 `import`되는 걸 원하지 않음)

  2. style prop

    function Button({ text }) {
      return (
        <button
          style={{
            backgroundColor: 'tomato',
            color: 'white',
          }}
        >
          {text}
        </button>
      );
    }

이렇게 <style>을 직접적으로 넣고 싶지 않으면

*reate-react-app으로 작업할 때의 포인트는 “분할”과 “정복”


  3. CSS modules

    // 파일 생성
    Button.module.css

  [Button.mudule.css]내에서 `btn`이라는 `class` 생성

    // Button.mudule.css
    .btn {
      color: white;
      background-color: tomato;
    }

  *[Button.mudule.css]를 [index.js]에 import하지 않음, 이 스타일을 [Button.js]에 `import`


    // Button.js
    import PropTypes from 'prop-types';
    import styles from './Button.module.css';

    function Button({ text }) {
      return <button className={styles.btn}>{text}</button>;
    }

    Button.propTypes = {
      text: PropTypes.string.isRequired,
    };

    export default Button;

  but create-react-app은 CSS 코드를 javascript `object`로 변환시켜 줌
  그리고 이 javascript `object`는 `btn`을 안에 갖고 있음


  콘솔창/Elements/`<button class=”…”>`을 보면

  create-react-app은 무작위적인 랜덤 `class`를 갖음, 심지어 <style>들도 modular가 될 수 있음
  ⇒ 고로 동일한 `class name`인 `btn`을, 다른 파일 내에서도 사용할 수 있음


    // 파일 생성
    App.module.css


    // App.module.css
    .title {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
        Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      font-size: 18px;
    }

    ⇒ CSS를 javascript object 형식으로 쓰는 것보단 훨씬 나음


    // App.js
    import Button from './Button';
    import styles from './App.module.css';

    function App() {
      return (
        <div>
          <h1 className={styles.title}>Welcome back!!!</h1>
          <Button text={'Continue'} />
        </div>
      );
    }

    export default App;

    +) 매번 다른 `class name`을 사용하기 위해 기억하지 않아도 됨
       because create-react-app이 그것들을 전부 랜덤하게 바꿔줄 테니까


∴ 이제 컴포넌트 분리해서 만들 수 있고, 그 컴포넌트를 위한 CSS를 만들 수 있음
  (= 컴포넌트나 스타일을 독립적이게 유지시켜줌)